spring.application.name=configserver

# whenever we are going to use file system/class path location/network derive, then we have to use native, and git for github location
# spring.profiles.active=native

# for using github repository
spring.profiles.active=git 

# Following is for reading configurations form class path i.e. inside src/main/config
# spring.cloud.config.server.native.search-locations=classpath:/config 


# Following is for reading from file system i.e. C:\config 
# spring.cloud.config.server.native.search-locations=file:///C://config
spring.cloud.config.server.git.uri=https://github.com/KashifUrRehman88/microservices-config.git

# below two configurations (line 19 and 21) are required for using git hub repository for configuration
# below line tells the config server, go ahead and clone the repo on start up, so that it has access to that read configuration
spring.cloud.config.server.git.clone-on-start=true
# below line tells the config server, the label that is being mantained inside github for your repo
spring.cloud.config.server.git.default-label=main


server.port=8071

# for encryption for some sensitive info i.e. passwords etc
# as soon as we keep this below property here, then config server will give two end point URLs one is to encrypt a property file by giving a general text,
# and other will "/decrypt" which will help us to understand what is the original value by passing the original value to the config server.
# Request URL : - http://localhost:8071/encrypt
# Request Type :- Post
# "Welcome to the EazyBank Accounts Prod application"    (for example , we want to encrypt this one)
# it will return an encrypted value
# add that encrypted value in properties file i.e. {cipher}xxxx
# Request URL : - http://localhost:8071/decrypt
# Request Type :- Post
# "xxxx"    (for example , we want to decrypt this one)
# it will return an decrypted value
encrypt.key=eazybytes